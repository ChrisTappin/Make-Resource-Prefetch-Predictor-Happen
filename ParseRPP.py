import sqlite3
import RPPO_pb2 # This is one of the files generated by the protobuf module using the .proto file in the Chromium source
import RPPHR_pb2 # ...and this is the other.
import datetime

sqlite_db_file = "Network Action Predictor" # TODO: take file name as argument

# Set CSV mode to True if you want a spreadsheet or False if you just want to read the output.
#   True:  Prints the host and last accessed timestamp in each row, and doesn't covert timstamps to human readable values.
#          Use csv_delimiter to change the demiliter, e.g. \t for tab.
#   False: Prints the host and converted timestamp then lists each origin. Skips less interesting redirects.
#          Use print_prefix and print_suffix to add text before or after each origin, or set to "" for none.

csv_mode = False
csv_delimiter = ","

print_prefix = " -"
print_suffix = ""

def ListRPPO(RPPOblob):
    if csv_mode == True:
        for i in RPPOblob.origins:
            print(f"{RPPO.host}{csv_delimiter}{RPPO.last_visit_time}{csv_delimiter}{i.origin}")
    else:
        #skip printing entries where there's only one origin and it matches the host
        if strip_url(RPPOblob.origins[0].origin) == RPPOblob.host and len(RPPOblob.origins) == 1:
            return  
        print(f"OriginStats for {RPPO.host} (last visited {parse_webkit_timestamp(RPPO.last_visit_time)})")
        for i in RPPOblob.origins:
            print(f"{print_prefix}{i.origin}{print_suffix}")

def ListRPPHR(RPPHRblob):
    if csv_mode == True:
        for i in RPPHRblob.redirect_endpoints:
            print(f"{RPPHR.primary_key}{csv_delimiter}{RPPHR.last_visit_time}{csv_delimiter}{i.url}")
    else:
        # skip printing entries where there's only one url and it matches the primary key
        if RPPHRblob.redirect_endpoints[0].url == RPPHR.primary_key and len(RPPHRblob.redirect_endpoints) == 1:
            return            
        print(f"RedirectStats for {RPPHR.primary_key} (last visited {parse_webkit_timestamp(RPPHR.last_visit_time)})")
        for i in RPPHRblob.redirect_endpoints:
            print(f"{print_prefix}{i.url}{print_suffix}")

def parse_webkit_timestamp(timestamp):
    time = datetime.timedelta(microseconds=int(timestamp))
    time = datetime.datetime(1601,1,1) + time
    return (time)

def fetch_sqlite_records(table='resource_prefetch_predictor_origin',sqlite_db_file='Network Action Predictor'):
    con = sqlite3.connect(sqlite_db_file)
    cur = con.cursor()
    res = cur.execute(f"SELECT * FROM {table}")
    records = res.fetchall()
    return records

def strip_url(url):
    url = url.split('/')[2]
    return url

if csv_mode == True:
    # Print a header row if we're making a CSV
    print(f"host{csv_delimiter}last_visit_time{csv_delimiter}origin")
    # Open each RPPO record and parse the blob

RPPO = RPPO_pb2.OriginData()
RPPOrecords = fetch_sqlite_records('resource_prefetch_predictor_origin', sqlite_db_file)

for record in RPPOrecords:
    RPPO.ParseFromString(record[1])
    ListRPPO(RPPO)

if csv_mode == True:
    # Print a header row if we're making a CSV
    print(f"primary_key{csv_delimiter}last_visit_time{csv_delimiter}url")

# Open each RPPHR record and parse the blob
RPPHR = RPPHR_pb2.RedirectData()
RPPHRrecords = fetch_sqlite_records('resource_prefetch_predictor_host_redirect', sqlite_db_file)

for record in RPPHRrecords:
    RPPHR.ParseFromString(record[1])
    ListRPPHR(RPPHR)
